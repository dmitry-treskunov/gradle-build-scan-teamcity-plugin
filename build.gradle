plugins {
    id 'com.gradle.build-scan' version '3.3.1'
    id 'nu.studer.plugindev' version '1.0.12'
    id 'nu.studer.credentials' version '2.1'
    id 'groovy'
}

group = 'nu.studer'
version = '1.2-DEV'

buildScan {
    publishAlways()
    obfuscation {
        ipAddresses { addresses -> addresses.collect { address -> '0.0.0.0' } }
    }
}

repositories {
    maven {
        // required for compileOnly dependency on build scan plugin API
        url 'https://plugins.gradle.org/m2/'
    }
}

configurations {
    buildScanPlugin
    gradleEnterprisePlugin
}

dependencies {
    buildScanPlugin 'com.gradle:build-scan-plugin:2.4.2'
    gradleEnterprisePlugin 'com.gradle:gradle-enterprise-gradle-plugin:3.3.1'

    compileOnly 'com.gradle:gradle-enterprise-gradle-plugin:3.3.1'

    testImplementation('org.spockframework:spock-core:1.3-groovy-2.5') {
        exclude module: 'groovy-all'
    }
    testImplementation 'io.ratpack:ratpack-groovy-test:1.7.5', {
        exclude module: 'groovy-all'
    }
    testImplementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.10.1'
}

plugindev {
    pluginId = 'nu.studer.build-scan.teamcity'
    pluginDescription 'Gradle plugin for build scans that notifies TeamCity when a build scan is published during a build.'
    pluginImplementationClass 'nu.studer.gradle.buildscan.teamcity.TeamCityBuildScanPlugin'
    pluginLicenses 'Apache-2.0'
    pluginTags 'gradle', 'plugin', 'teamcity', 'build scan'
    authorId 'etiennestuder'
    authorName 'Etienne Studer'
    authorEmail 'etienne@studer.nu'
    projectUrl 'https://github.com/etiennestuder/gradle-build-scan-teamcity-plugin'
    projectInceptionYear '2019'
    done()
}

bintray {
    user = credentials.BINTRAY_USER
    key = credentials.BINTRAY_API_KEY
    pkg.repo = 'gradle-plugins'
    dryRun = false
}

test {
    environment('TEAMCITY_VERSION', '2019.1')
    jvmArgumentProviders.add(new PluginUnderTestCommandLineArgumentProvider(buildScanPlugin: configurations.buildScanPlugin, gradleEnterprisePlugin: configurations.gradleEnterprisePlugin))
}

final class PluginUnderTestCommandLineArgumentProvider implements CommandLineArgumentProvider {

    @Classpath
    FileCollection buildScanPlugin

    @Classpath
    FileCollection gradleEnterprisePlugin

    @Override
    Iterable<String> asArguments() {
        [
            "-DbuildScanPluginClasspath=${buildScanPlugin.singleFile.absolutePath}",
            "-DgradleEnterprisePluginClasspath=${gradleEnterprisePlugin.singleFile.absolutePath}"
        ]
    }

}
